/*------------------------------------*\
    $MIXINS
\*------------------------------------*/
// Mixin for box-sizing
// ====================================================================

@mixin bs($bs-type: $defined-bs-type) {
	-webkit-box-sizing: $bs-type;
	-moz-box-sizing: $bs-type;
	box-sizing: $bs-type;
}

// Mixin for creating pill shaped buttons
// ====================================================================

@mixin button-links($button-base: darken($color11,10%),$button-hover: darken($color11,95%)) {
	//border: 1px solid darken($color11,6%);
	border: 0;
	padding: .3em .6em;
	margin-left: .7em;
	text-decoration: none;
	@include border-radius(3px);
	@include text-shadow(0 1px 2px $color11);
	color: darken($color-link, 20%);
	background-color: $button-base;
	@extend %single-transition;
	&:hover {
		background-color: $button-hover;
	}
}

// Media Query mixin
@mixin MQ($canvas) {
	@if $canvas == XS {
		@media only screen and (min-width: $XS) and (max-width: $S - 1) { @content; }
	}
	@else if $canvas == S {
		@media only screen and (min-width: $S) and (max-width: $M - 1) { @content; }
	}
	@else if $canvas == M {
		@media only screen and (min-width: $M) and (max-width: $L - 1) { @content; }
	}
	@else if $canvas == L {
		@media only screen and (min-width: $L) and (max-width: $XL - 1) { @content; }
	}
	@else if $canvas == XL {
		@media only screen and (min-width: $XL) and (max-width: $XXL - 1) { @content; }
	}
	@else if $canvas == XSplus {
		@media only screen and (min-width: $XS) { @content; }
	}
	@else if $canvas == Splus {
		@media only screen and (min-width: $S) { @content; }
	}
	@else if $canvas == Mplus {
		@media only screen and (min-width: $M) { @content; }
	}
	@else if $canvas == Lplus {
		@media only screen and (min-width: $L) { @content; }
	}
	@else if $canvas == XLplus {
		@media only screen and (min-width: $XL) { @content; }
	}
	@else if $canvas == XSneg {
		@media only screen and (max-width: $XS) { @content; }
	}
	@else if $canvas == Sneg {
		@media only screen and (max-width: $S) { @content; }
	}
	@else if $canvas == Mneg {
		@media only screen and (max-width: $M) { @content; }
	}
	@else if $canvas == Lneg {
		@media only screen and (max-width: $L) { @content; }
	}
	@else if $canvas == XLneg {
		@media only screen and (max-width: $XL) { @content; }
	}
	@else if $canvas == StoL {
		@media only screen and (min-width: $S) and (max-width: $L - 1) { @content; }
	}
}

@mixin image-2x($image, $width, $height) {
  @media (min--moz-device-pixel-ratio: 1.3),
         (-o-min-device-pixel-ratio: 2.6/2),
         (-webkit-min-device-pixel-ratio: 1.3),
         (min-device-pixel-ratio: 1.3),
         (min-resolution: 1.3dppx) {
    background-image: url($image);
    background-size: $width $height;
  }
}
@mixin breakpoint($point) {
  @if $point == small-only {
    @media #{$screen} and (max-width: #{upper-bound($small-range)})  { @content; }
  }
    @else if $point == medium-up {
    @media #{$screen} and (min-width: #{lower-bound($medium-range)}) { @content; }
  }
    @else if $point == medium-only {
    @media #{$screen} and (min-width: #{lower-bound($medium-range)}) and (max-width:#{upper-bound($medium-range)})  { @content; }
  }
    @else if $point == large-up {
    @media #{$screen} and (min-width:#{lower-bound($large-range)})  { @content; }
  }
    @else if $point == large-only {
    @media #{$screen} and (min-width: #{lower-bound($large-range)}) and (max-width:#{upper-bound($large-range)})  { @content; }
  }
    @else if $point == xlarge-up {
    @media #{$screen} and (min-width: #{lower-bound($xlarge-range)})  { @content; }
  }
    @else if $point == xlarge-only {
    @media #{$screen} and (min-width: #{lower-bound($xlarge-range)}) and (max-width:#{upper-bound($xlarge-range)})  { @content; }
  }
    @else if $point == xxlarge-up {
    @media #{$screen} and (min-width:#{lower-bound($xxlarge-range)})  { @content; }
  }
    @else if $point == xxlarge-only {
    @media #{$screen} and (min-width:#{lower-bound($xxlarge-range)}) and (max-width:#{upper-bound($xxlarge-range)})  { @content; }
  }
}
@mixin border-radius($radius) {
  -webkit-border-radius: $radius / $rem-base + rem;
     -moz-border-radius: $radius / $rem-base + rem;
      -ms-border-radius: $radius / $rem-base + rem;
       -o-border-radius: $radius / $rem-base + rem;
  -webkit-border-radius: $radius;
     -moz-border-radius: $radius;
      -ms-border-radius: $radius;
       -o-border-radius: $radius;
          border-radius: $radius / $rem-base + rem; 
          border-radius: $radius;
}
@mixin clearfix() {
    &:before,
    &:after {
        content: "";
        display: table;
    }
    &:after {
        clear: both;
    }
}
@mixin opacity($opacity) {
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity=$opacity-ie); //IE8
}
@mixin animation($animate) {
    $max: length($animate);
    $animations: '';

    @for $i from 1 through $max {
        $animations: #{$animations + nth($animate, $i)};

        @if $i < $max {
            $animations: #{$animations + ", "};
        }
    }
    -webkit-animation: $animations;
    -moz-animation:    $animations;
    -o-animation:      $animations;
    animation:         $animations;
}

@mixin keyframes($animationName) {
    @-webkit-keyframes #{$animationName} {
        @content;
    }
    @-moz-keyframes #{$animationName} {
        @content;
    }
    @-o-keyframes #{$animationName} {
        @content;
    }
    @keyframes #{$animationName} {
        @content;
    }
}